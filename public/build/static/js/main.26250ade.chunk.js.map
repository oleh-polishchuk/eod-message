{"version":3,"sources":["components/Header/Header.js","components/Integration/Integration.js","components/Loading/Loading.js","App.js","serviceWorker.js","index.js"],"names":["Header","_ref","logo","title","react_default","a","createElement","className","href","src","alt","Integration","integration","url","icons","map","icon","index","key","description","Loading","isLoading","children","react","concat","integrations","id","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","setTimeout","setState","rel","components_Header_Header","components_Loading_Loading","components_Integration_Integration","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.26250ade.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Header.css';\n\nconst Header = ({ logo, title }) => (\n    <header className=\"header\">\n        <div className=\"header__container container\">\n            <a href=\"/\" className=\"header__home-link\">\n                <img\n                    src={logo} alt=\"Logo\"\n                    className=\"header__logo\"\n                />\n            </a>\n            <div className=\"header__title\">\n                {title}\n            </div>\n        </div>\n    </header>\n);\n\nHeader.propTypes = {\n    logo: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n};\n\nexport default Header;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport './Integration.css';\n\nconst Integration = ({ integration }) => (\n    <a\n        className=\"integration\"\n        href={integration.url}\n    >\n        <div className=\"integration__icons\">\n            {integration.icons.map((icon, index) => (\n                <div key={index} className=\"integration__icon-group\">\n                    <img\n                        className=\"integration__icon\"\n                        src={icon}\n                        alt=\"icon\"\n                    />\n                    <img\n                        className=\"integration__plus\"\n                        src=\"/images/plus-icon.jpg\"\n                        alt=\"icon\"\n                    />\n                </div>\n            ))}\n        </div>\n        <div className=\"integration__title\">{integration.title}</div>\n        <div className=\"integration__description\">{integration.description}</div>\n    </a>\n);\n\nIntegration.propTypes = {\n    integration: PropTypes.shape({\n        title: PropTypes.oneOfType([\n            PropTypes.string.isRequired,\n            PropTypes.node.isRequired,\n        ]).isRequired,\n        description: PropTypes.oneOfType([\n            PropTypes.string.isRequired,\n            PropTypes.node.isRequired,\n        ]).isRequired,\n        icons: PropTypes.arrayOf(\n            PropTypes.string\n        ).isRequired,\n        url: PropTypes.string.isRequired,\n    }).isRequired,\n};\n\nexport default Integration;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport './Loading.css';\n\nconst Loading = ({ isLoading, children }) => (\n    <Fragment>\n        <section className=\"loading\">\n            {isLoading && (\n                <div className=\"loading__label\">\n                    Loading... <img src=\"/images/indicator.png\" alt=\"Indicator\" className=\"loading__indicator\" />\n                </div>\n            )}\n            <div className={`loading__content ${isLoading ? \"loading__content--active\" : \"\"}`}>\n                {children}\n            </div>\n        </section>\n    </Fragment>\n);\n\nLoading.propTypes = {\n    isLoading: PropTypes.bool.isRequired,\n    children: PropTypes.node.isRequired,\n};\n\nexport default Loading;\n","import React, { Fragment, Component } from 'react';\nimport './App.css';\nimport Header from \"./components/Header/Header\";\nimport Integration from \"./components/Integration/Integration\";\nimport Loading from \"./components/Loading/Loading\";\n\nconst integrations = [\n    {\n        id: '0',\n        title: 'Status update',\n        description: <span>Integration pull your daily activity from Harvest and send it into Slack <b>#fed-eod</b> channel</span>,\n        icons: [\n            '/images/harvest-icon.jpg',\n            '/images/slack-icon.jpg',\n        ],\n        url: '/eod-message',\n    }, {\n        id: '1',\n        title: 'Redmine reports',\n        description: 'Integration pull your daily activity from Harvest, sync it with Asana, and send it into Redmine as a time entries',\n        icons: [\n            '/images/harvest-icon.jpg',\n            '/images/asana-icon.jpg',\n            '/images/redmine-icon.jpg',\n        ],\n        url: '/reports',\n    },\n];\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isLoading: true,\n        };\n    }\n\n    componentDidMount() {\n        setTimeout(() => {\n            this.setState({ isLoading: false });\n        }, 500);\n    }\n\n    render() {\n        const { isLoading } = this.state;\n\n        return (\n            <Fragment>\n                <link href=\"https://fonts.googleapis.com/css?family=Roboto&display=swap\" rel=\"stylesheet\" />\n                <div className=\"page\">\n                    <Header\n                        title=\"Messenger\"\n                        logo=\"/images/nectar-logo.jpg\"\n                    />\n                    <Loading isLoading={isLoading}>\n                        <div className=\"page__container container\">\n                            <div className=\"page__label\">All integrations</div>\n                            <div className=\"page__integrations\">\n                                {integrations.map(integration => (\n                                    <Integration\n                                        key={integration.id}\n                                        integration={integration}\n                                    />\n                                ))}\n                            </div>\n                        </div>\n                    </Loading>\n                </div>\n            </Fragment>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './global.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}