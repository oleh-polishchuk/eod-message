{"version":3,"sources":["components/Header/Header.js","components/Loading/Loading.js","components/Integration/Integration.js","pages/Home/index.js","pages/Reports/index.js","pages/StatusUpdate/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","_ref","logo","title","react_default","a","createElement","className","href","src","alt","Loading","isLoading","children","react","concat","Integration","integration","react_router_dom","to","url","icons","map","icon","index","key","description","integrations","id","Home","components_Integration_Integration","Reports","team","name","position","StatusUpdate","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getEODMessage","axios","get","window","location","search","then","res","setState","message","data","catch","error","timer","formatTime","time","countDownDate","Date","setHours","interval","setInterval","now","getTime","distance","hours","Math","floor","minutes","seconds","document","getElementById","innerHTML","clearInterval","state","user","Component","App","_this2","setTimeout","rel","components_Header_Header","components_Loading_Loading","react_router","exact","path","component","Boolean","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5ad313d4.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Header.css';\n\nconst Header = ({ logo, title }) => (\n    <header className=\"header\">\n        <div className=\"header__container container\">\n            <a href=\"/\" className=\"header__home-link\">\n                <img\n                    src={logo} alt=\"Logo\"\n                    className=\"header__logo\"\n                />\n            </a>\n            <div className=\"header__title\">\n                {title}\n            </div>\n        </div>\n    </header>\n);\n\nHeader.propTypes = {\n    logo: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n};\n\nexport default Header;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport './Loading.css';\n\nconst Loading = ({ isLoading, children }) => (\n    <Fragment>\n        <section className=\"loading\">\n            {isLoading && (\n                <div className=\"loading__label\">\n                    Loading... <img src=\"/images/indicator.png\" alt=\"Indicator\" className=\"loading__indicator\" />\n                </div>\n            )}\n            <div className={`loading__content ${isLoading ? \"loading__content--active\" : \"\"}`}>\n                {children}\n            </div>\n        </section>\n    </Fragment>\n);\n\nLoading.propTypes = {\n    isLoading: PropTypes.bool.isRequired,\n    children: PropTypes.node.isRequired,\n};\n\nexport default Loading;\n","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\nimport './Integration.css';\n\nconst Integration = ({ integration }) => (\n    <Link\n        to={integration.url}\n        className=\"integration\"\n    >\n\n        <div className=\"integration__icons\">\n            {integration.icons.map((icon, index) => (\n                <div key={index} className=\"integration__icon-group\">\n                    <img\n                        className=\"integration__icon\"\n                        src={icon}\n                        alt=\"icon\"\n                    />\n                    <img\n                        className=\"integration__plus\"\n                        src=\"/images/plus-icon.jpg\"\n                        alt=\"icon\"\n                    />\n                </div>\n            ))}\n        </div>\n        <div className=\"integration__title\">{integration.title}</div>\n        <div className=\"integration__description\">{integration.description}</div>\n    </Link>\n);\n\nIntegration.propTypes = {\n    integration: PropTypes.shape({\n        title: PropTypes.oneOfType([\n            PropTypes.string.isRequired,\n            PropTypes.node.isRequired,\n        ]).isRequired,\n        description: PropTypes.oneOfType([\n            PropTypes.string.isRequired,\n            PropTypes.node.isRequired,\n        ]).isRequired,\n        icons: PropTypes.arrayOf(\n            PropTypes.string\n        ).isRequired,\n        url: PropTypes.string.isRequired,\n    }).isRequired,\n};\n\nexport default Integration;\n","import './style.css';\nimport React, { Fragment } from 'react';\nimport Integration from \"../../components/Integration/Integration\";\n\nconst integrations = [\n    {\n        id: '0',\n        title: 'Status update',\n        description: <span>Integration pull your daily activity from Harvest and send it into Slack <b>#fed-eod</b> channel</span>,\n        icons: [\n            '/images/harvest-icon.jpg',\n            '/images/slack-icon.jpg',\n        ],\n        url: '/eod-message',\n    }, {\n        id: '1',\n        title: 'Redmine reports',\n        description: 'Integration pull your daily activity from Harvest, sync it with Asana, and send it into Redmine as a time entries',\n        icons: [\n            '/images/harvest-icon.jpg',\n            '/images/asana-icon.jpg',\n            '/images/redmine-icon.jpg',\n        ],\n        url: '/reports',\n    },\n];\n\nconst Home = () => (\n    <Fragment>\n        <div className=\"page__label\">All integrations</div>\n        <div className=\"page__integrations\">\n            {integrations.map(integration => (\n                <Integration\n                    key={integration.id}\n                    integration={integration}\n                />\n            ))}\n        </div>\n    </Fragment>\n);\n\nHome.propTypes = {};\n\nexport default Home;\n","import './style.css';\nimport React from 'react';\n\nconst Reports = () => (\n    <div>reports page</div>\n);\n\nReports.propTypes = {};\n\nexport default Reports;\n","import './style.css';\nimport axios from 'axios'\nimport React, { Fragment, Component } from 'react';\n\nconst Timer = () => (\n    <div className=\"eod__timer\">\n        <section className=\"timer\">\n            <div className=\"timer__title\">Time to Send</div>\n            <div className=\"timer__time\" id=\"timerTime\">00:00:00</div>\n            <div className=\"timer__schedule-time\">Daily at 18:00</div>\n        </section>\n    </div>\n);\n\nconst team = [\n    {\n        name: 'Oleh Polishchuk',\n        position: 'Front-End Engineer: Nectar',\n        logo: '/images/oleh.jpg',\n    },\n    {\n        name: 'Faisal Mughal',\n        position: 'Front-End Engineer: Nectar',\n        logo: '/images/faisal.png',\n    },\n    {\n        name: 'Avi Zuber',\n        position: 'Front-End Engineer: DreamCloud',\n        logo: '/images/avi.png',\n    },\n];\n\nclass StatusUpdate extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            message: null,\n            error: null,\n        }\n    }\n\n    componentDidMount() {\n        this.getEODMessage()\n    }\n\n    getEODMessage = () => {\n        axios.get(`/api/message${window.location.search}`).then(res => {\n            this.setState({ message: res.data })\n        }).catch(error => {\n            this.setState({ error })\n        })\n    };\n\n    timer = () => {\n        const formatTime = (time) => {\n            if (time < 10) {\n                time = `0${time}`;\n            }\n            return time;\n        };\n\n        const countDownDate = new Date();\n        countDownDate.setHours(20, 0, 0);\n\n        const interval = setInterval(function () {\n            const now = new Date().getTime();\n            const distance = countDownDate.getTime() - now;\n\n            const days = Math.floor(distance / (1000 * 60 * 60 * 24));\n            const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n            const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n            const seconds = Math.floor((distance % (1000 * 60)) / 1000);\n\n            document.getElementById(\"timerTime\").innerHTML = `${formatTime(hours)}:${formatTime(minutes)}:${formatTime(seconds)}`;\n\n            if (distance < 0) {\n                clearInterval(interval);\n                document.getElementById(\"timerTime\").innerHTML = \"SENT\";\n            }\n        }, 1000);\n    }\n\n    render() {\n        const { message } = this.state;\n\n        return (\n            <Fragment>\n                {team.map(user => (\n                    <section className=\"eod\">\n                        <div className=\"eod__container\">\n                            <div className=\"eod__post\">\n                                <section className=\"post\">\n                                    <div className=\"post__author\">\n                                        <section className=\"author\">\n                                            <img className=\"author__icon\"\n                                                 src={user.logo}\n                                                 alt=\"Author\" />\n                                            <div className=\"author__caption\">\n                                                <div className=\"author__name\">{user.name}</div>\n                                                <div className=\"author__position\">{user.position}</div>\n                                            </div>\n                                        </section>\n                                    </div>\n                                    <pre className=\"post__message\">\n                                {message || \"Loading...\"}\n                            </pre>\n                                </section>\n                            </div>\n                        </div>\n                    </section>\n                ))}\n            </Fragment>\n        );\n    }\n}\n\nStatusUpdate.propTypes = {};\n\nexport default StatusUpdate;\n","import React, { Fragment, Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport './App.css';\nimport Header from \"./components/Header/Header\";\nimport Loading from \"./components/Loading/Loading\";\nimport Home from \"./pages/Home\";\nimport Reports from \"./pages/Reports\";\nimport StatusUpdate from \"./pages/StatusUpdate\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isLoading: true,\n        };\n    }\n\n    componentDidMount() {\n        setTimeout(() => {\n            this.setState({ isLoading: false });\n        }, 500);\n    }\n\n    render() {\n        const { isLoading } = this.state;\n\n        return (\n            <Fragment>\n                <link href=\"https://fonts.googleapis.com/css?family=Roboto&display=swap\" rel=\"stylesheet\" />\n                <div className=\"page\">\n                    <Header\n                        title=\"Messenger\"\n                        logo=\"/images/nectar-logo.jpg\"\n                    />\n                    <Loading isLoading={isLoading}>\n                        <div className=\"page__container container\">\n                            <Router>\n                                <Route exact path=\"/\" component={Home} />\n                                <Route exact path=\"/reports\" component={Reports} />\n                                <Route exact path=\"/eod-message\" component={StatusUpdate} />\n                            </Router>\n                        </div>\n                    </Loading>\n                </div>\n            </Fragment>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './global.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}